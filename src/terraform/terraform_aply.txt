PS E:\DANIT\Step3_project\src\terraform> terraform apply 
data.aws_ami.amazon_linux: Reading...
data.aws_ami.amazon_linux: Read complete after 0s [id=ami-0b65d57be27e8f4e7]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_eip.nat_eip will be created
  + resource "aws_eip" "nat_eip" {
      + allocation_id        = (known after apply)
      + arn                  = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = "vpc"
      + id                   = (known after apply)
      + instance             = (known after apply)
      + ipam_pool_id         = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + ptr_record           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags_all             = (known after apply)
      + vpc                  = (known after apply)
    }

  # aws_instance.jenkins_master will be created
  + resource "aws_instance" "jenkins_master" {
      + ami                                  = "ami-0b65d57be27e8f4e7"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "jenkins-key-arkadii"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "jenkins-master-arkadii"
        }
      + tags_all                             = {
          + "Name" = "jenkins-master-arkadii"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options (known after apply)

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # aws_instance.jenkins_worker will be created
  + resource "aws_instance" "jenkins_worker" {
      + ami                                  = "ami-0b65d57be27e8f4e7"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + disable_api_stop                     = (known after apply)
      + disable_api_termination              = (known after apply)
      + ebs_optimized                        = (known after apply)
      + enable_primary_ipv6                  = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + host_resource_group_arn              = (known after apply)
      + iam_instance_profile                 = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_lifecycle                   = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "jenkins-key-arkadii"
      + monitoring                           = (known after apply)
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + placement_partition_number           = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = (known after apply)
      + source_dest_check                    = true
      + spot_instance_request_id             = (known after apply)
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "jenkins-worker-arkadii"
        }
      + tags_all                             = {
          + "Name" = "jenkins-worker-arkadii"
        }
      + tenancy                              = (known after apply)
      + user_data                            = (known after apply)
      + user_data_base64                     = (known after apply)
      + user_data_replace_on_change          = false
      + vpc_security_group_ids               = (known after apply)

      + capacity_reservation_specification (known after apply)

      + cpu_options (known after apply)

      + ebs_block_device (known after apply)

      + enclave_options (known after apply)

      + ephemeral_block_device (known after apply)

      + instance_market_options {
          + market_type = "spot"

          + spot_options {
              + instance_interruption_behavior = "terminate"
              + max_price                      = (known after apply)
              + spot_instance_type             = "one-time"
              + valid_until                    = (known after apply)
            }
        }

      + maintenance_options (known after apply)

      + metadata_options (known after apply)

      + network_interface (known after apply)

      + private_dns_name_options (known after apply)

      + root_block_device (known after apply)
    }

  # aws_internet_gateway.igw will be created
  + resource "aws_internet_gateway" "igw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "igw-arkadii"
        }
      + tags_all = {
          + "Name" = "igw-arkadii"
        }
      + vpc_id   = (known after apply)
    }

  # aws_key_pair.jenkins_key will be created
  + resource "aws_key_pair" "jenkins_key" {
      + arn             = (known after apply)
      + fingerprint     = (known after apply)
      + id              = (known after apply)
      + key_name        = "jenkins-key-arkadii"
      + key_name_prefix = (known after apply)
      + key_pair_id     = (known after apply)
      + key_type        = (known after apply)
      + public_key      = (known after apply)
      + tags_all        = (known after apply)
    }

  # aws_nat_gateway.nat will be created
  + resource "aws_nat_gateway" "nat" {
      + allocation_id                      = (known after apply)
      + association_id                     = (known after apply)
      + connectivity_type                  = "public"
      + id                                 = (known after apply)
      + network_interface_id               = (known after apply)
      + private_ip                         = (known after apply)
      + public_ip                          = (known after apply)
      + secondary_private_ip_address_count = (known after apply)
      + secondary_private_ip_addresses     = (known after apply)
      + subnet_id                          = (known after apply)
      + tags                               = {
          + "Name" = "nat-gateway-arkadii"
        }
      + tags_all                           = {
          + "Name" = "nat-gateway-arkadii"
        }
    }

  # aws_route.private_nat_access will be created
  + resource "aws_route" "private_nat_access" {
      + destination_cidr_block = "0.0.0.0/0"
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + nat_gateway_id         = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + route_table_id         = (known after apply)
      + state                  = (known after apply)
    }

  # aws_route.public_internet_access will be created
  + resource "aws_route" "public_internet_access" {
      + destination_cidr_block = "0.0.0.0/0"
      + gateway_id             = (known after apply)
      + id                     = (known after apply)
      + instance_id            = (known after apply)
      + instance_owner_id      = (known after apply)
      + network_interface_id   = (known after apply)
      + origin                 = (known after apply)
      + route_table_id         = (known after apply)
      + state                  = (known after apply)
    }

  # aws_route_table.private will be created
  + resource "aws_route_table" "private" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Name" = "private-rt-arkadii"
        }
      + tags_all         = {
          + "Name" = "private-rt-arkadii"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table.public will be created
  + resource "aws_route_table" "public" {
      + arn              = (known after apply)
      + id               = (known after apply)
      + owner_id         = (known after apply)
      + propagating_vgws = (known after apply)
      + route            = (known after apply)
      + tags             = {
          + "Name" = "public-rt-arkadii"
        }
      + tags_all         = {
          + "Name" = "public-rt-arkadii"
        }
      + vpc_id           = (known after apply)
    }

  # aws_route_table_association.private_assoc will be created
  + resource "aws_route_table_association" "private_assoc" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_route_table_association.public_assoc will be created
  + resource "aws_route_table_association" "public_assoc" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # aws_security_group.jenkins_sg will be created
  + resource "aws_security_group" "jenkins_sg" {
      + arn                    = (known after apply)
      + description            = "Allow SSH, HTTP and Jenkins (8080)"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "HTTP"
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "Jenkins HTTP"
              + from_port        = 8080
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 8080
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = "SSH"
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
        ]
      + name                   = "jenkins-sg-arkadii"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "jenkins-sg-arkadii"
        }
      + tags_all               = {
          + "Name" = "jenkins-sg-arkadii"
        }
      + vpc_id                 = (known after apply)
    }

  # aws_security_group_rule.allow_ssh_internal will be created
  + resource "aws_security_group_rule" "allow_ssh_internal" {
      + description              = "Allow SSH between Jenkins master and worker"
      + from_port                = 22
      + id                       = (known after apply)
      + protocol                 = "tcp"
      + security_group_id        = (known after apply)
      + security_group_rule_id   = (known after apply)
      + self                     = false
      + source_security_group_id = (known after apply)
      + to_port                  = 22
      + type                     = "ingress"
    }

  # aws_subnet.private will be created
  + resource "aws_subnet" "private" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-central-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = false
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "private-subnet-arkadii"
        }
      + tags_all                                       = {
          + "Name" = "private-subnet-arkadii"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_subnet.public will be created
  + resource "aws_subnet" "public" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = "eu-central-1a"
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "public-subnet-arkadii"
        }
      + tags_all                                       = {
          + "Name" = "public-subnet-arkadii"
        }
      + vpc_id                                         = (known after apply)
    }

  # aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "vpc-arkadii"
        }
      + tags_all                             = {
          + "Name" = "vpc-arkadii"
        }
    }

  # local_file.inventory_worker will be created
  + resource "local_file" "inventory_worker" {
      + content              = (known after apply)
      + content_base64sha256 = (known after apply)
      + content_base64sha512 = (known after apply)
      + content_md5          = (known after apply)
      + content_sha1         = (known after apply)
      + content_sha256       = (known after apply)
      + content_sha512       = (known after apply)
      + directory_permission = "0777"
      + file_permission      = "0777"
      + filename             = "./../ansible/files/inventory_worker.ini"
      + id                   = (known after apply)
    }

  # local_file.private_key will be created
  + resource "local_file" "private_key" {
      + content              = (sensitive value)
      + content_base64sha256 = (known after apply)
      + content_base64sha512 = (known after apply)
      + content_md5          = (known after apply)
      + content_sha1         = (known after apply)
      + content_sha256       = (known after apply)
      + content_sha512       = (known after apply)
      + directory_permission = "0700"
      + file_permission      = "0600"
      + filename             = "./../ansible/files/jenkins-key-arkadii.pem"
      + id                   = (known after apply)
    }

  # null_resource.generate_inventory will be created
  + resource "null_resource" "generate_inventory" {
      + id = (known after apply)
    }

  # tls_private_key.jenkins will be created
  + resource "tls_private_key" "jenkins" {
      + algorithm                     = "RSA"
      + ecdsa_curve                   = "P224"
      + id                            = (known after apply)
      + private_key_openssh           = (sensitive value)
      + private_key_pem               = (sensitive value)
      + private_key_pem_pkcs8         = (sensitive value)
      + public_key_fingerprint_md5    = (known after apply)
      + public_key_fingerprint_sha256 = (known after apply)
      + public_key_openssh            = (known after apply)
      + public_key_pem                = (known after apply)
      + rsa_bits                      = 2048
    }

Plan: 21 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + internet_gateway_id       = (known after apply)
  + jenkins_master_public_ip  = (known after apply)
  + jenkins_worker_private_ip = (known after apply)
  + nat_gateway_id            = (known after apply)
  + private_subnet_id         = (known after apply)
  + public_subnet_id          = (known after apply)
  + vpc_id                    = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

tls_private_key.jenkins: Creating...
tls_private_key.jenkins: Creation complete after 0s [id=1a85f642119dca970ead472b4ce03bc98bdea2a2]
local_file.private_key: Creating...
local_file.private_key: Creation complete after 0s [id=97b6400db33539a189cf106083abf820bca83732]
aws_key_pair.jenkins_key: Creating...
aws_eip.nat_eip: Creating...
aws_vpc.main: Creating...
aws_key_pair.jenkins_key: Creation complete after 0s [id=jenkins-key-arkadii]
aws_eip.nat_eip: Creation complete after 1s [id=eipalloc-0106dd07bf6247815]
aws_vpc.main: Creation complete after 1s [id=vpc-05ee6ecdcd50ce7da]
aws_internet_gateway.igw: Creating...
aws_route_table.private: Creating...
aws_route_table.public: Creating...
aws_subnet.public: Creating...
aws_subnet.private: Creating...
aws_security_group.jenkins_sg: Creating...
aws_internet_gateway.igw: Creation complete after 1s [id=igw-07bfa20a6ae682eed]
aws_route_table.public: Creation complete after 1s [id=rtb-08daf7fd313689953]
aws_route.public_internet_access: Creating...
aws_route_table.private: Creation complete after 1s [id=rtb-0924ce5f3e6fe4457]
aws_subnet.private: Creation complete after 1s [id=subnet-03f6773107e7586b6]
aws_route_table_association.private_assoc: Creating...
aws_route_table_association.private_assoc: Creation complete after 1s [id=rtbassoc-02d059bf88fa1b2aa]
aws_route.public_internet_access: Creation complete after 1s [id=r-rtb-08daf7fd3136899531080289494]
aws_security_group.jenkins_sg: Creation complete after 4s [id=sg-0ea9af2a7c2f30c71]
aws_security_group_rule.allow_ssh_internal: Creating...
aws_instance.jenkins_worker: Creating...
aws_security_group_rule.allow_ssh_internal: Creation complete after 1s [id=sgrule-1437078515]
aws_subnet.public: Still creating... [10s elapsed]
aws_subnet.public: Creation complete after 12s [id=subnet-0a4b3d210dc0c99fc]
aws_route_table_association.public_assoc: Creating...
aws_nat_gateway.nat: Creating...
aws_instance.jenkins_master: Creating...
aws_route_table_association.public_assoc: Creation complete after 0s [id=rtbassoc-00434d2aae6e329c1]
aws_instance.jenkins_worker: Still creating... [10s elapsed]
aws_instance.jenkins_worker: Creation complete after 16s [id=i-0e3952e7672581bf7]
local_file.inventory_worker: Creating...
local_file.inventory_worker: Creation complete after 0s [id=8bc6f957034ad183c6fd3a08ef8b20cdc15e4e3c]
aws_nat_gateway.nat: Still creating... [10s elapsed]
aws_instance.jenkins_master: Still creating... [10s elapsed]
aws_instance.jenkins_master: Creation complete after 13s [id=i-0cc4d6e89a53b07a3]
null_resource.generate_inventory: Creating...
null_resource.generate_inventory: Provisioning with 'local-exec'...
null_resource.generate_inventory (local-exec): Executing: ["cmd" "/C" "echo [jenkins_master] > ../ansible/inventory.ini && echo 18.194.176.30 ansible_user=ec2-user ansible_ssh_private_key_file=~/.ssh/jenkins-key-arkadii.pem >> ../ansible/inventory.ini"]
null_resource.generate_inventory: Creation complete after 0s [id=1614771428701799927]
aws_nat_gateway.nat: Still creating... [20s elapsed]
aws_nat_gateway.nat: Still creating... [30s elapsed]
aws_nat_gateway.nat: Still creating... [40s elapsed]
aws_nat_gateway.nat: Still creating... [50s elapsed]
aws_nat_gateway.nat: Still creating... [1m0s elapsed]
aws_nat_gateway.nat: Still creating... [1m10s elapsed]
aws_nat_gateway.nat: Still creating... [1m20s elapsed]
aws_nat_gateway.nat: Still creating... [1m30s elapsed]
aws_nat_gateway.nat: Still creating... [1m40s elapsed]
aws_nat_gateway.nat: Still creating... [1m50s elapsed]
aws_nat_gateway.nat: Creation complete after 1m55s [id=nat-0a99ee037265209f4]
aws_route.private_nat_access: Creating...
aws_route.private_nat_access: Creation complete after 1s [id=r-rtb-0924ce5f3e6fe44571080289494]

Apply complete! Resources: 21 added, 0 changed, 0 destroyed.

Outputs:

internet_gateway_id = "igw-07bfa20a6ae682eed"
jenkins_master_public_ip = "18.194.176.30"
jenkins_worker_private_ip = "10.0.2.223"
nat_gateway_id = "nat-0a99ee037265209f4"
private_subnet_id = "subnet-03f6773107e7586b6"
public_subnet_id = "subnet-0a4b3d210dc0c99fc"
vpc_id = "vpc-05ee6ecdcd50ce7da"